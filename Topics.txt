Python(Guido van Rossum 1985-1990 at National Research Institute of Mathematics and Computer Science in Netherlands): 
- Interpreted, Interactive, object oriented, functional, structure(Procedureal), can be used as scripting language or can be compiled to byte code, Dynamic data type(we can change the data type by assigning diff variable at run time), Dynamic type checking, automatic garbage collection.
	- Interactive mode: CMD: python , quit()
	- Script mode: Python File_Name.py [command_line_argument]
- Python is named after a TV Show called ëMonty Pythonís Flying Circusí.
- Python Enviroment Variable:Pythonpath, pythonstartup, pythoncaseok, pythonhome
- Python Command line options: -d(It provides debug output), -O(It generates optimized bytecode (resulting in .pyo files)), -S(Do not run import site to look for Python paths on startup), -v(verbose output (detailed trace on import statements)), -c cmd(run Python script sent in as cmd string), file(run Python script from given file)


Topics:
Namespace:	BuiltIn Namespace contain-> Module specific Global Namespace contain-> Function local Name Space


Notes:
1. Python is casesenstive language.
2. Semocolon(;) can be used for mutli-statement in a single line. Ex: a=2;b=3;
3. print(dir(locals()['__builtins__']))#view all the built-in exceptions
3. No enclosing delimiters is any set of comma-separated multiple objects. i.e., brackets for lists, parentheses for tuples etc(Default to tuples)
4. In python prompt underscore(_) is used to refer the output of previous command and In the script can be used in place of variable that wouldn't be used.
5. Indexig & Slicing
	-Indexing in python start at 0 and will always be less than one to stop value and we can also use negative indexing to traverse reversly start from -1.
	-Slice operator can be used with sequence(list, tuple, string) as object_name[start:stop:step_size](If slice operator is like [a:] and a is out of index then it will return a blank String, List, Tuple)
5. Print("Hi 
		There")  o/p->Output of multiline string will always be in multiple line, Same format whatever is there in multi-line string.

5. Mutable	: we can add/update existing value of variable.
6. Immutable	: Each time we will try to add/update the existing value it will create  new object and then it will assign that new object value to that varaible.
1. Mutable object will be created in diff location everytime even if they have same value.
2. Immutable objects will created in same location for small length(interpreter check if a object is already their in heap with same value then it will not create a same object otherwise it will create a new object, works only for small length object)
7. Implicit conversion: Python promotes the conversion of the lower data type (integer) to the higher data type (float) to avoid data loss 
   Ex: 1+2.3 o/p->3.3
8. Explicit conversion(Type casting: int(var), float(var),str(var),set(sequence), list(sequence), tuple(sequence), dict(list of tuple or list of list))
9. del var_name[ ,var_name....]	#can be use to delete the object reference.
10. A module is loaded only once, regardless of the number of times it is imported. This prevents the module execution from happening repeatedly, if multiple imports occur. 
11. __name__ is special name that is assigned at run time as '__main__ if this is the file from where file starts to run but if it is a imported file then __name__ is something else, So this variable can be used to run statement that should be runned when the file is not imported or imported.
12. input("something:")#always read as string need to convert into specific type
4.Python 3 evaluates 3 / 2 as 1.5 by default
2. print(*objects, sep=' ', end='\n', file=sys.stdout, flush=False)
	Note
	file - It must be an object with a write(string) method.
	By-Default end='\n' flush out every element but if the end perameter is something else then '\n' then either we have to manually write code to flush out the output from buffer(sys.stdout.flush()) or flush=True else it will get print only when buffer gets full.
3. pypi is repo for open-source third-party python package and PIP(Python package manager is used to get all the files related to library) is used to download the package from pypi 
4. Unit testing -we can use different testing tool pylint,unittest
5. pip install -r requirements.txt# we can use this command to install a number of libraries mentioned in the text file.
	

11. import this#Zen of python
12. Why doesn't 0.1+0.2-0.3 is equal to 0.0
	https://docs.python.org/2/tutorial/floatingpoint.html
13. Ex:
	fruits = ("apple", "banana", "cherry", "strawberry", "raspberry")
	(green, yellow, *red) = fruits #Here red will be list of elements


1. Identifier(Python is a case sestive language): Start with a letter A to Z or a to z or an underscore (_) followed by zero or more letters, underscores and digits (0 to 9) or A-Z or a-z.
	1. Starting an identifier with a single leading underscore indicates that the identifier is private.
	2. Starting an identifier with two leading underscores indicates a strongly private identifier.
	3. If the identifier also ends with two trailing underscores, the identifier is a language-defined special name.
	4. Identifier can be of any length

2. Multi Line Statements: Statements in Python typically end with a new line. Python does, however, allow the use of the line continuation character (\) to denote that the line should continue
	ex: total = item_one + \
        item_two + \
        item_three

	Note:
	Statements contained within the [], {}, or () brackets do not need to use the line continuation character.

6. Comments:	single line	: #
		multiline 	: ''' ''' or """ """

7. Multiple assignment:		a, b, c = 5, 3.2, "Hello"   			x = y = z = "same"
Here id(x),id(y),id(z) will be same(address of object in memory)

8. sequence unpacking		a,b,c=[1,2,3]

9. Keywords : import keyword ;	print(keyword.kwlist)  #list of keywrods present in python   ex: True, False, None - Except these 3 keyword rest are in lowercase

10.BuiltIn Data type :

	Text Type:	str
	Numeric Types:	int, float, complex
	Sequence Types:	list, tuple, range
	Mapping Type:	dict
	Set Types:	set, frozenset
	Boolean Type:	bool
	Binary Types:	byte(Immutable version of bytearray), bytearray, memoryview


	Immutable: 
	1. 	Number
		-Int-(binary ex:'0b' or '0B' ex:'0B100', decimal , octal ex:'0o' or '0O' , Hexadecimal: '0x' or '0X' )- Positive/Negaticve
		-Float(12.5,e, E)- Positive/Negaticve
		-Complex(2+3j) ex: Number=12+5j print(Number.imag, Number.real)) o/p->5 12 
			Note:
			You cannot convert complex numbers into another number type.
		
		Note:
		-By-default print function will represent Number(Int-(binary,decimal, octal, Hexadecimal) in deciml format only.
		-Integer can be of any length only, only limited by memory.
		-Floatting point number can be accurate up to 15 decimal places.

	2.	String('', "", """"""(multiline string), ''''''(multiline string))	
		Ex: a="" # Blank string , 
		-Raw_String(quotes prefix with r or R): it will depriciate the meaning of special character, if present there in that string. 
		Ex: r'\nBrajesh' 
		-Unicode String(quotes prefix with u): Ex: u'\u00050'
		Note:
		-Strings in Python are arrays of bytes representing unicode characters.
		-All string methods returns new values. They do not change the original string.
		-Ex- print(type(b'bytes for storing data'), type(bytearray(b'bytearrays')))	o/p- <class 'bytes'> <class 'bytearray'>
		x = memoryview(bytes(5)).  o/p -> <class 'memoryview'>
				
	3. 	Tuple(Ordered, Duplicate, Can't Add, Remove, Update. Can have mutable and immutable elements ) 
		Ex:	a=()#blank tuple, tup1 = (50,)#tuple with one element
		Note:
		Tuple is immutable but elements can be of type mutable Ex: a=(1,'s',[1,2,3])

	4.	Frozen_set(ordered collection of unique elements)
		Ex: frozenset([1,2,3]) 
	
	5.	boolean(True(1)-Non-zero,have any sort of content  , False(0)- None, Empty sequence(''(Blank string),list, tuple, dict, set etc), 
		EX: 	x = (1 == True) o/p->True,	
			y = (1 == False) o/p->False,
			a = True + 4 o/p->5,
			b = False + 10 o/p->10
			Note:
			if(object of a class) #False if __len__ function defined by class returns 0 or False then
		
			

	Mutable:   	
	1.	List(Ordered,Add,Remove,Update,Allow duplicate,Can have mutable and immutable elements Ex:list,tuple,string, number etc) 
		Ex:	a=[] #Empty list
		Note:
		-Bradcasting not allowed in list, Ex: list[0:5]=100 gives error, but a[0:3]=[2,5] is allowed b/e it's a multi assignment
		-If you insert more items than you replace, the new items will be inserted where you specified, and the remaining items will move 			 accordingly:
			Ex:	a=[1,2,3]; a[0:1]=[2,5]; print(a) o/p->[2,5,2,3]
		- If you insert less items than you replace, the new items will be inserted where you specified, and the remaining items will move 			  accordingly:

	2. 	Dictonary(Keys are Immutable but values are mutable): Ordered collection of key-value pair
		Ex:	a={}#blank dictonary, 
		Note:
		- dict is ordered collection of elements
		-In dictonary if we have key present multiple times then the output will have key present single time with a value in the last 						occurance.
			Ex:
			webster = {"Aardvark" : "An animal","Banana" : "A delicious fruit","Cyan" : "A color", "Cyan" : "A Win"}
			o/p--->webster = {"Aardvark" : "An animal","Banana" : "A delicious fruit", "Cyan" : "A Win"}

	3.	ordereddict(keep order of dictonary)
		-Key can be primitive datatype but values can be any python object
		
	4. 	Set(unordered,unindexed, No duplicate, Add,Remove, Can't update, Can have only immutable elements) 		
		Ex:	a=set() #blank set,
			Note:
			- we can use for loop to iterate over elements but the order is not promised here.
			-Slicing operator can't be used with Set b/e it's unordered colletion of unique elements. 
			-Set is mutable we can add but elements of sets are immutable, so a={1,'abc',[1,2]} will give error b/e mutable element list can't be within set.	
	
			
	None(object of NoneType- we can't create object of NoneType but same None object can be assigned to multiple variable) Special constant


BuiltIn Fuction
range(start, stop, step_size)#return a sequence of oject Ex: range(10): 0 to 9 , range(0,10): 0 to 9
len(object): number of elements present in sequence
Filter function: Call function for every element present in the seqence and return values from sequence condition evaluate to True(function should return True or False)
# Program to filter out only the even items from a list
my_list = [1, 5, 4, 6, 8, 11, 3, 12]
new_list = list(filter(lambda x: (x%2 == 0) , my_list))
print(new_list)

Map Function: Call function for every element present in the seqence
# Program to double each item in a list using map()
my_list = [1, 5, 4, 6, 8, 11, 3, 12]
new_list = list(map(lambda x: x * 2 , my_list))
print(new_list)
reduce(object, fnction)
enumerate(object, index)
max(object)
min(object)
zip()#combine the every nth position value of passed object and result into list of tuple, If there is umcommon number of items in those passed object , it will zip till every passed object have items ,rest it will leave

abs(number)#return absolute value of a number , 
all(iterable_object)#reutrn true if all the elements in iterable are true or if iterable is empty it returns True, 
any(iterable_object)#reutrn true if any of the elements in interable object is True or if iterable is empty it returns False
sum(iterable_objects)#return sum of elements of interable object
bool(object) #cast object into boolean type
ascii(), 
callable(object)#returns True if the passed object is callable, otherwise False.
bin(interger)#return binary representation of interger, 
type(Object) #return the class name of object
isinstance(objectName, ClassName)#return True if the object is of type class otherwise False 
globals() #return the list of global variable that can be accessed from current namespace.
locals() #return the list of local variable that can be accessed from current namespace.
dir(module_name): give all the names defined in that module
dir(): give all the names can be accessible fromcurrent namespace
sorted()
id(object)#return address of object in memory
	

11. Function : 	def , parameter(positional, keyword, default, vararg(can be of two type-> tuple of object(*args) or mapping of object-dictonary(**args))),  Optional return statement
	Note:
	- Default argument can't be followed by positional argument in declaration statement.
	- Keyword argument can't be followed by positional argument in calling statement.
	- vararg should always be in last in a function declaration statement having positional, keyword, default, vararg argument .
	- *args and **kwargs(name of variable could be anything)
			*args is tuple of values(we can paas multiple value from calling function)
			**kwargs is multiple key value pair passed from calling and result into a disctonary of name kwargs within function  
	- Function can be created within function(Nested function)
	- If we will not return any object from function bydefault it will return None object.
	- Everything in python is call by reference
	- global: To refer the variable that is defined outside the function.
	- nonlocal: To refer the variable that is defined in outer function.
	Note:
	global or nonlocal can be useable when either we want to update the value of global/nonlocal variable or if we want to read a global/nonlocal variable value and we have same variable name present inside function/nested function.

	Ex:	def fun_name(parameter):
			''''multi line doc string'''
			#multiple statement 
			return [object_name]
			
		---------
		
		def myfunc():
  			x = 300
  			def myinnerfunc():#Nested Function
    				print(x)
  			myinnerfunc()

		myfunc()
				

3.Anonymous function:	x=lambda arguments: expression
			x(2)#calling a lambda function
			#Take variable number of argument and return a single value as expression 
			#have access to variable with in passed perameter or variable can be accessible from current namespace
			#It returns a function object which is assigned to the identifier
			Ex:
			def myfunc(n):
  					return lambda a : a * n

				mydoubler = myfunc(2)
				print(mydoubler(11)) 			o/p ->22
			
4.Operator:	Airthmetic(+,-,*,/,//(Floor division),**(Power)), 
		comparison(==,!=,<>,>,>=,<,<=), 
		Assignment(=,+=,-=,*=,/=,//=,**=),
		Logical(and , or , not), 
		Bitwise(&-and, |-or, ^-XOR, ~-one's complement ,<<-left shift ,>>-right shift), 
		Membership(in , not in),  
		indentity(is( True if located on the same part of the memory) , is not)
		
5.Flow control:		If, if else, if elif, if elif else, for , for else, while, while else, break, continue, pass(To define empty class, function, control statement+)
			Ex: 
			print("A") if a > b else print("B")	#Short-hand if else
			if a > b: print("a is greater than b")	#Short-hand if
			print("A") if a > b else print("+") if a == b else print("B") o/p-> +.  #Ternary operator
			
			Note:
			1. for else loop: else block will be executed if no break occur at for loop and for loop complted.
			2. while else : else block will be executed when no break occur and condition evaulate to false.
			3. The for loop actually creates an iterator object and executes the next() method for each loop
			5. For: When number of interation is known in advance, While: No. of iteration is not known in advance, do-while: For menu driven program


6.Module and package: 	Module is .py file 
				note:
				
			Package(Colection of module) have __init__.py file 
			Sub Package have __init__.py file

			import module_name			#import particular module in current namespace
			import module_name as alias_name	#import particular module with alias name in current namespace
			from module_name import names		#import specific name in module in current namespace
			from module_name import *		#import all the names from a module in current namespace
			from module_name import name1,name2	#import multiple name in module in current namespace
			
	Note
	-Interpreter first looks for a built-in module then list of directories defined in sys.path. 			
	-The sys.path variable contains the current directory, PYTHONPATH(An environment variable with list of directory), and the installation-dependent default(we can also add our custom path in sys.pth list).


2. List Comprehension:	concise way to create a new list from an existing list in Python.
			Ex: 	[2 ** x for x in range(10)]	
				[x for x in range(20) if x % 2 == 1]
				[x for x in range(20) if x % 2 == 1 if x % 4 == 1]
				[x+y for x in ['Python ','C '] for y in ['Language','Programming']]
				[x if x!=0 else 1 for x in ['Python ','C ']]
				

3. Dictionary Comprehension: 	squares = {x: x*x for x in range(6)}
				new_dict = {k: v for (k, v) in original_dict.items() if v % 2 != 0 if v < 40}


13. Exception Handling:	try-except,	try-except Exception as e, try-except (comma seprated multiple class of exception), try-multiple_except, try-except-else, try-except-else-finally.

Try-contain code, Except-if there is error in try block , else-if there is no error in try block, finally-always run


14. Raise an exception, User define exception
	Syntex: raise object_of_exception_class('message')#exception class can be inbuilt or user defined exception class
	Ex: raise ZeroDivisionError('cannot divide')


7. OOP: 
	1. Class
			class Person:
			'''This is a docstring. I have created a new class'''#Doc string
  				def __init__(self, name, age):	#Class methods should have self as first perameter defined in method defination.
    					self.name = name
    					self.age = age
					
				  def myfunc(self):
	    				print("Hello my name is " + self.name)

			p1 = Person("John", 36)	#Create a object of class Person with it's name as "John" and age as 36.
			p1.myfunc() o/p -> Hello my name is John	#p1 is object od class Person and myfunc is method of class Person 
			print(p1.name)	o/p -> John
			print(p1.age) 	o/p -> 36
			
			Notes:
			1. A class creates a new local namespace where all its attributes are defined. Attributes may be data or functions.
			2. all the methods that start from double underscore are magic/Dunder methods , have used for special purpose 
				Ex:
				__str__ used for string rep that we want to print when object of user defined class is passed to it 
				__len__ when your user defined object is passed to len() function or 
				__del__ when object is passed to del object statement 
				__doc__ To access the documentation of function , class
				__init__() is used to assign values to object properties, or other operations that are necessary to do when the object is 						being created.
					Note:
					The __init__() function is called automatically every time the class is being used to create a new object.
			3. The self parameter is a reference to the current instance of the class, and is used to access variables that belong to the 					current instance of class. It does not have to be named self , you can call it whatever you like, but it has to be the 					first parameter of any function in the class:	
			
	2. Inheritance(Inheritance allows us to define a class that inherits all the methods and properties from another class)
		#Parent class is the class being inherited from, also called base class.
		class Person:
  			def __init__(self, fname, lname):
    				self.firstname = fname
    				self.lastname = lname

			def printname(self):
				print(self.firstname, self.lastname)


		x = Person("John", "Doe")
		x.printname()	o/p -> John Doe
		
		#Child class is the class that inherits from another class, also called derived class.
		class Student(Person):#Here we can pass the parent class name in parenthesis after the derived class name
  			pass
			
			Note:
			Here Student class inherit the __init__(), printable function.
			
			
		x = Student("Mike", "Olsen")
		x.printname()	o/p -> Mike Olsen
		-----------
		class Student(Person):# Here if we add the __init__() function within derived class then while creating object of Student system will not 					call the __init__() function of poarent class
  			def __init__(self, fname, lname):
    			#add properties etc.
			
		-----------
		class Student(Person):
  			def __init__(self, fname, lname):
    				Person.__init__(self, fname, lname) or super().__init__(fname, lname)
				
			Note:
			- If you add a method in the child class with the same name as a function in the parent class, the inheritance of the parent method will be overridden.
			- python support multiple inheritance and resolve from left to right.
			- Overloading not allowed in python.
	
		
		
	
	3. Polymorphism- we can use it in abstract class(abstract class have method which have to implement by subclass) just raise an error in base class method


8.  Iterator: 	
	
		Note:
		-Iterator in Python is simply an object that is traversable and will return one element at a time.
		-Python iterator object must implement two special methods, __iter__() and __next__(), collectively called the iterator protocol.
		-Lists, tuples, dictionaries, and sets are all iterable objects.
		
		Ex: 
		list = [1,2,3,4]
		it = iter(list) # this builds an iterator object
		print (next(it)) o/p ->1 
		print (next(it)) o/p ->2 
		print (next(it)) o/p ->3 
		print (next(it)) o/p ->4 
		----
		class MyNumbers:# Here is how we can define our own iterator 
  			def __iter__(self):
   				self.a = 1
    				return self

  			def __next__(self):
    				x = self.a
    				self.a += 1
    				return x

		myclass = MyNumbers()
		myiter = iter(myclass)

		print(next(myiter))
		print(next(myiter))
		print(next(myiter))
		print(next(myiter))
		print(next(myiter))
		-------
		class MyNumbers:
			def __iter__(self):
				self.a = 1
		    		return self

		  	def __next__(self):
		    		if self.a <= 20:
			      		x = self.a
			      		self.a += 1
			      		return x
			    	else:
			      		raise StopIteration

		myclass = MyNumbers()
		myiter = iter(myclass)

		for x in myiter:
		  print(x)


9. Genrator:	Python generators are a simple way of creating iterators
		A generator is a function that returns an object (iterator) which we can iterate over (one value at a time)
		If a function contains at least one yield statement (it may contain other yield or return statements), it becomes a generator function


10.Genrator Expression: generator expressions create anonymous generator functions.
			similar to list comprehension , just we use parenthesis in place of square bracket


10. Clousre: Technique by which some data ("Hello") gets attached to the code is called closure in Python.

11. Decorator:
32.Decorator are just function that take a function as argument and return sub function that is used to add more functionality over a function
	and use the decorator function name as @decorator_name over a function of which functionality we are enhancing 


12. Property




15. assert Keyword: 
	1. used for debugging process
	2. While programming, sometimes we wish to know the internal state or check if our assumptions are true. assert helps us do this and find bugs 	   more 		   conveniently. assert is followed by a condition.
	3. If the condition is true, nothing happens. But if the condition is false, AssertionError is raised. For example:
	
	structure : assert condition, message(msg if assertion error is raised)

	Ex: int a=5;	assert a<=10 'a is not smaller and equal to 10'	#It will raise AssertionError if condition get fail


16. with statement is used to wrap the execution of a block of code within methods defined by the context manager.

Context manager is a class that implements __enter__ and __exit__ methods. Use of with statement ensures that the __exit__ method is called at the end of the nested block. This concept is similar to the use of try…finally block. Here, is an example.

with open('example.txt', 'w') as my_file:
    my_file.write('Hello world!')
This example writes the text Hello world! to the file example.txt. File objects have __enter__ and __exit__ method defined within them, so they act as their own context manager.

First the __enter__ method is called, then the code within with statement is executed and finally the __exit__ method is called. __exit__ method is called even if there is an error. It basically closes the file stream.


17. yield is used inside a function like a return statement. But yield returns a generator.

	Generator is an iterator that generates one item at a time. A large list of values will take up a lot of memory. Generators are useful in this situation as it generates only one value at a time instead of storing all the values in memory. For example,

 g = (2**x for x in range(100))#generator expression



will create a generator g which generates powers of 2 up to the number two raised to the power 99. We can generate the numbers using the next() function as shown below.

>>> next(g)
1
>>> next(g)
2
>>> next(g)
4
>>> next(g)
8
>>> next(g)
16


def generator():
    for i in range(6):
        yield i*i

g = generator()
for i in g:
    print(i)









list(enumrate(iterable object))#it will give list of tuple with element mappped to index location.

Module name:
math		: To carry out different mathematics like trigonometry, logarithms, probability and statistics, etc.
decimal		: Bydefault in python 1.1+2.2==3.3 will evalutae to False b/e of limitation of our computer hardware. so we can use decimal module instead when we are dealing with financial type of application
fractions	: Deal with fractional representtion of number
random		: To get the random number
datetime	: To work with datetime 
re(Regex module): To work with regular expression		
sphinx		: Library used to generate the documentation of a code.
nbconverter	:Library use to convert the ipynb(Jupyter notebook) into python file.
Timeit library is used to measure the execution time of a python code snippet
 	import timeit
	%timeit test_range(n)?-after importing the timeit module call in same syntex it will give the time taken by module  

Libraries based on uses:
Machine Learning - TensorFlow, PyTorch, Scikit-learn, Matplotlib, Scipy, etc.
Mathematics - Numpy, Pandas, etc.

  


Question:
1. Can we use slicing with dictonary.
2. PEP stands for Python Enhancement Proposal. It is a set of rules that specify how to format Python code for maximum readability.
3. Is forzen_set mutable and it's element immutable?
4. Difference b/w is and == operator?
5. Try to create two list with same elements and check the id and ==?

