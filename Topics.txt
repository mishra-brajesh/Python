
Python(Guido van Rossum 1985-1990 at National Research Institute of Mathematics and Computer Science in Netherlands): Interpreted, Interactive, object oriented, functional, structure(Procedureal), can be used as scripting language or can be compiled to byte code, Dynamic data type(we can change the data type by assigning diff variable at run time), Dynamic type checking, automatic garbage collection.

Python is named after a TV Show called ëMonty Pythonís Flying Circusí.

Python 3.0 was released in 2008.

Python Enviroment Variable:Pythonpath, pythonstartup, pythoncaseok, pythonhome

Python Command line options: -d(It provides debug output), -O(It generates optimized bytecode (resulting in .pyo files)), -S(Do not run import site to look for Python paths on startup), -v(verbose output (detailed trace on import statements)), -X(disable class-based built-in exceptions (just use strings); obsolete starting with version 1.6.), -c cmd(run Python script sent in as cmd string), file(run Python script from given file)

Python is casesenstive language.



Topics:
1. Interactive mode: CMD: python , quit()
2. Script mode: Python File_Name.py [command_line_argument]


3. Identifier(Python is a case sestive language): Start with a letter A to Z or a to z or an underscore (_) followed by zero or more letters, underscores and digits (0 to 9) or A-Z or a-z.
	1. Starting an identifier with a single leading underscore indicates that the identifier is private.
	2. Starting an identifier with two leading underscores indicates a strongly private identifier.
	3. If the identifier also ends with two trailing underscores, the identifier is a language-defined special name.
	4. Identifier can be of any length


4. Multi Line Statements: Statements in Python typically end with a new line. Python does, however, allow the use of the line continuation character (\) to denote that the line should continue
	ex: total = item_one + \
        item_two + \
        item_three

5. Statements contained within the [], {}, or () brackets do not need to use the line continuation character.

6. Comments:	single line	: #
		multiline 	: ''' ''' or """ """

7. Multiple assignment:		a, b, c = 5, 3.2, "Hello"   			x = y = z = "same"
Here id(x),id(y),id(z) will be same(address of object in memory)

8. sequence unpacking		a,b,c=[1,2,3]

9. Keywords : import keyword ;	print(keyword.kwlist)  #list of keywrods present in python   ex: True, False, None - Except these 3 keyword rest are in lowercase



10.BuiltIn Data type :

	Text Type:	str
	Numeric Types:	int, float, complex
	Sequence Types:	list, tuple, range
	Mapping Type:	dict
	Set Types:	set, frozenset
	Boolean Type:	bool
	Binary Types:	bytes, bytearray, memoryview


	Immutable: 	Number
			(Int-(binary ex:'0b' or '0B' ex:'0B100', decimal  , octal ex:'0o' or '0O' , Hexadecimal: '0x' or '0X' )- any length, 
			Float(12.5,e, E), 				
			Complex(2+3j) ex: Number=12+5j print(Number.imag, Number.real)) o/p->5 12 				
			Note:
				By-default print function will represent Number(Int-(binary,decimal, octal, Hexadecimal) in deciml format only.
				Integer can be of any length only, only limited by memory
				floatting point number can be accurate up to 15 decimal places.

			String('', "", """"""(multiline string), ''''''(multiline string))	#a="" # Blank string , 
			Raw_String(quotes prefix with r or R): it will depriciate the meaning of special character, if present there in that string. Ex: r'\nBrajesh' 
			Unicode String(quotes prefix with u): Ex: u'\u00050'
				Note:
				Python 3 stores strings as Unicode, by default,  We have Unicode (utf-8) and 2 byte classes: byte(Immutable version of bytearray) and 				bytearray.
				ex-
				1. print('Python', python_version(), end="")
				   print(' has', type(b' bytes for storing data'))

					   o/p-Python 3.4.1 has <class 'bytes'>

				2. print('and Python', python_version(), end="")
				   print(' also has', type(bytearray(b'bytearrays')))

					   o/p-and Python 3.4.1 also has <class 'bytearray'>
				Print("Hi 
					There
					")  o/p->Output of multiline string will always be in multiple line

			Tuple  - a=()#blank tuple, tup1 = (50,)#tuple with one element, Why not a=(50)? Use Type function.

			Frozen_set(ordered collection of unique elements)->Ex: frozenset([1,2,3]) 
				Note: 	Slicing operator can be used with forzenset
					frozen_set and it's elements are immutable.
			

	Mutable:   	List a=[] #Empty list(If we will pass Empty list in the If condition then it will evaluate to False), What about other sequences?,
				Note:
				list.method()#give the list of method available for performing operation on list
				Bradcasting not allowed in list#list[0:5]=100; gives error
				a[0:3]=[2,5] is allowed b/e it's a multi assignment

			Dictonary(Keys are Immutable but values are mutable): Ordered collection of key-value pairs	#a={}#blank dictonary, 

				Note:
				In dictonary if we have key present multiple times then the output will have key present single time with a value in the last 						occurance.
				
				Ex:
				webster = {"Aardvark" : "An animal","Banana" : "A delicious fruit","Cyan" : "A color", "Cyan" : "A Win"}
					o/p--->webster = {"Aardvark" : "An animal","Banana" : "A delicious fruit", "Cyan" : "A Win"}

				ordereddict object keep order of dictonary 
				Key can be primitive datatype but values can be any python object
		
			Set(unordered collection of unique element) 		#a=set() #blank set,
				Note: 	Slicing operator can't be used with Set b/e it's unordered colletion of unique elements. 
					Set is mutable but elements of sets are immutable, so a={1,'abc',[1,2]} will give error b/e mutable elements can't be within 					set.
			
			
					
			
			boolean(True(1)-Non-zero  , False(0)- None, Empty sequence), EX: x = (1 == True) o/p->True,y = (1 == False) o/p->False,a = True + 4 o/p->5,
			b = False + 10 o/p->10
				Note:
				 if you have an object that is made from a class with a __len__ function that returns 0 or False:
			
			None(object of NoneType- we can't create object of NoneType but same None object can be assigned to multiple variable) Special constant

	Note:
	1. Mutable	: we can add/update existing value of variable, it will not create a new object.
	2. Immutable	: Each time we will try to add/update the existing value it will create  new object and then it will assign that new object value to that 			  	varaible.
	3. Implicit conversion or Explicit conversion(Type casting: int(var), float(var),str(var),set(sequence), list(sequence), tuple(sequence), dict(list of tuple 	or list of list))
	4. Python promotes the conversion of the lower data type (integer) to the higher data type (float) to avoid data loss Ex: 1+2.3 o/p->3.3
	5. del var_name[ ,var_name....]#can be use to delete the object reference(In python everything is an object).
	6. Semocolon(;) allow mutli-statement in a single line.
	7. No enclosing Delimiters is any set of multiple objects, comma-separated, written without identifying symbols, i.e., brackets for lists, parentheses for 	tuples etc., default to tuples.
	9. A module is loaded only once, regardless of the number of times it is imported. This prevents the module execution from happening repeatedly, if multiple 	imports occur. 
	10. In python prompt underscore(_) is used to refer the output of previous command and In the script can be used in place of variable that couldn't be used.
	11. import this#Zen of python
	12. Why doesn't 0.1+0.2-0.3 is equal to 0.0
    		https://docs.python.org/2/tutorial/floatingpoint.html
	13. print formatting
	https://pyformat.info/
	14. + operator with sequence(list, tuple, string) type work as a concatnation operator and * as a repetation operator
 

11. Indexig & Slicing:
	1. Indexing in python start at 0 and will always be less than one to stop value and we can also use negative indexing to traverse reversly start from -1.
	1. Slice operator can be used with sequence(list, tuple, string) as object_name[start:stop:step_size](If slice operator is like [a:] and a is out of index then 		it will return a blank String, List, Tuple)
	
	

	
	
	

	
	
12.Function : 	def , parameter(positional, keyword, default, vararg(can be of two type-> tuple of object(*args) or mapping of object-dictonary(**args))),  Optional return statement
		Function can be created within function(Nested function)
		
		Note:
		Default argument can't be followed by positional argument in declaration statement.
		Keyword argument can't be followed by positional argument in calling statement.
		vararg should always be in last in a function declaration statement having positional, keyword, default, vararg argument .
		*args and **kwargs(name of variable could be anything)
			*args is tuple of values(we can paas multiple value from calling function)
			**kwargs is multiple key value pair passed from calling and result into a disctonary of name kwargs within function  
			we can also use both at the same time first args  then kwargs

		Ex:	def fun_name(parameter):
				''''multi line doc string'''
				#multiple statement 
				return [object_name]

		Note:
		1. If we will not return any object from function bydefault it will return None object.
		2. Everything in python is call by reference


		
BuiltIn Fuction
abs(number)#return absolute value of a number , 
all(iterable_object)#reutrn true if all the elements in iterable are true or if iterable is empty it returns True, 
any(iterable_object)#reutrn true if any of the elements in interable object is True or if iterable is empty it returns False
sum(iterable_objects)#return sum of elements of interable object
bool(object) #cast object into boolean type
ascii(), 
callable(object)#returns True if the passed object is callable, otherwise False.
bin(interger)#return binary representation of interger, 
type(Object) #return the class name of object
isinstance(objectName, ClassName)#return True if the object is of type class otherwise False 
globals() #return the list of global variable that can be accessed from current namespace.
locals() #return the list of local variable that can be accessed from current namespace.
dir(module_name)#returns a sorted list of strings containing the names defined by a module. 
dir()#can be use to check the names available to current namespace
sorted()
iter(object)#convert object into iterable object
range(start, stop, step_size)#return a sequence of oject Ex: range(10): 0 to 9 , range(0,10): 0 to 9
len(object): number of elements present in sequence
map( function,oject)
filter(function),object
reduce(object, fnction)
enumerate(object, index)
max(object)
min(object)
id(object)#return address of object in memory
zip(*object)



		global: global keyword (global var_name) is used to show interpreter that this variable is present outside the function.
		nonlocal: same as glocal used for nested function.
		note:
			global or nonlocal can be useable when either we want to update the value of variable(For reading a global variable value we don't need to define refer global keyword inside function only if we don;t have same name varaible present inside function.


3.Anonymous function:	x=lambda arguments: expression
			x(2)#calling a lambda function
			#Take variable number of argument and return a single value as expression 
			#have access to variable with in passed perameter or global namespace
			#It returns a function object which is assigned to the identifier
			

4.Operator:	Airthmetic(+,-,*,/,//(Floor division),**(Power)), 
		comparison(==,!=,<>,>,>=,<,<=), 
		Assignment(=,+=,-=,*=,/=,//=,**=),
		Logical(and , or , not), 
		Bitwise(&-and, |-or, ^-XOR, ~-one's complement ,<<-left shift ,>>-right shift), 
		Membership(in , not in),  
		indentity(is( True if located on the same part of the memory) , is not)
			Note:
			Diff between is and ==:
				the == operator is used to test if two variables are equal or not, is is used to test if the two variables refer to the same object.
				1. Mutable object will be created in diff location everytime even if they have same value
				2. Immutable objects will created in same location for small length(interpreter check if a object is already their in heap with same 					value then it will not create a same object otherwise it will create a new object, works only for small length object)


 

5.Flow control:		If, if else, if elif, if elif else, for , for else, while, while else, break, continue, pass(To define empty class, function, control statement+)
			Note:
			1. for else loop: else block will be executed if no break occur at for loop and for loop complted.
			2. while else : else block will be executed when no break occur and condition evaulate to false.
			3. For loop takes a iterator object.
			4. for loop convert the paas object into iterable object 
			5. For: When number of interation is known in advance, While: No. of iteration is not known in advance, do-while: For menu driven program




6.Module and package: 	Module is .py file 
				note:
				dir(module_name): give all the names defined in that module
				dir(): give all the names can be accessible fromcurrent namespace
			Package(Colection of module) have __init__.py file 
			Sub Package have __init__.py file

			import module_name			#import particular module in current namespace
			import module_name as alias_name	#import particular module with alias name in current namespace
			from module_name import names		#import specific name in module in current namespace
			from module_name import *		#import all the names from a module in current namespace
			from module_name import name1,name2	#import multiple name in module in current namespace
			
			29. if__name__=='__main__'":use only for finding and running some statements if the file run directly 
			The file which we are runing have a varable __name__ that is assigned at run time as '__main__'(because this is the file from where file start to run) but if it is a imported file then __name__ is something else
	if it is imported then the file in which it is imported have variable __name__ as '__main__'
	when we import the file it will run first all the statement at zero indentation 

			

			Interpreter first looks for a built-in module. Then(if built-in module not found), Python looks into a list of directories defined in sys.path. 			
8. Locating Modules
	When you import a module, the Python interpreter searches for the module in the following sequences −
	The module search path is stored in the system module sys as the sys.path variable. 
	The sys.path variable contains the current directory, PYTHONPATH(An environment variable with list of directory), and the installation-dependent default(we can also add our custom path in sys.pth list).



2. List Comprehension:	concise way to create a new list from an existing list in Python.
			Ex: 	[2 ** x for x in range(10)]	
				[x for x in range(20) if x % 2 == 1]	
				[x+y for x in ['Python ','C '] for y in ['Language','Programming']]
				[x if x!=0 else 1 for x in ['Python ','C ']]

3. Dictionary Comprehension: 	squares = {x: x*x for x in range(6)}
				new_dict = {k: v for (k, v) in original_dict.items() if v % 2 != 0 if v < 40}


13. Exception Handling: try-except, try-except Exception, try-except Exception as e, try-except (comma seprated multiple class of exception), try-multiple_except, try-except-else, try-except-else-finally,sys.exc_info()[0](Can be used to get the class of exception)

Try-contain code, Except-if there is error in try block , else-if there is no error in try block, finally-always run


14. Raise an exception, User define exception
	Syntex: raise object_of_exception_class('message')#exception class can be inbuilt or user defined exception class
	Ex: raise ZeroDivisionError('cannot divide')

30. print(dir(locals()['__builtins__']))#view all the built-in exceptions


7. OOP: Class
		Ex: class MyNewClass:
			    '''This is a docstring. I have created a new class'''#Doc string
			    pass

		Points:
			1. A class creates a new local namespace where all its attributes are defined. Attributes may be data or functions.
			26. all the methods that start from double underscore are magic/Dunder methods , have used for special purpose 
				ex. __str__ used for string rep that we want to print when object of user defined class is passed to it 
				or __len__ when your user defined object is passed to len() function or __del__ when object is passed to del object statement 
			34.Doc String can be use with module, function , method, class(can be accessible using fun_name.__doc__))





	Inheritance 

	25. python support multiple inheritance and resolve from left to right 
	Inheritance-we can override the method but can not overload method in python 
	Polymorphism- we can use it in abstract class(abstract class have method which have to implement by subclass) just raise an error in base class method

	
	Overloading

8.  Iterator: 	Iterator in Python is simply an object that can be iterated upon. An object which will return data, one element at a time.
		Implemented in-for loop, comprehension, genrator
		Python iterator object must implement two special methods, __iter__() and __next__(), collectively called the iterator protocol.
		An object is called iterable if we can get an iterator from it.
Ex: 
list = [1,2,3,4]
it = iter(list) # this builds an iterator object
print (next(it)) #prints next available element in iterator
		


9. Genrator:	Python generators are a simple way of creating iterators
		A generator is a function that returns an object (iterator) which we can iterate over (one value at a time)
		If a function contains at least one yield statement (it may contain other yield or return statements), it becomes a generator function


10.Genrator Expression: generator expressions create anonymous generator functions.
			similar to list comprehension , just we use parenthesis in place of square bracket


10. Clousre: Technique by which some data ("Hello") gets attached to the code is called closure in Python.

11. Decorator:
32.Decorator are just function that take a function as argument and return sub function that is used to add more functionality over a function
	and use the decorator function name as @decorator_name over a function of which functionality we are enhancing 


12. Property




15. assert Keyword: 
	1. used for debugging process
	2. While programming, sometimes we wish to know the internal state or check if our assumptions are true. assert helps us do this and find bugs 	   more 		   conveniently. assert is followed by a condition.
	3. If the condition is true, nothing happens. But if the condition is false, AssertionError is raised. For example:
	
	structure : assert condition, message(msg if assertion error is raised)

	Ex: int a=5;	assert a<=10 'a is not smaller and equal to 10'	#It will raise AssertionError if condition get fail


16. with statement is used to wrap the execution of a block of code within methods defined by the context manager.

Context manager is a class that implements __enter__ and __exit__ methods. Use of with statement ensures that the __exit__ method is called at the end of the nested block. This concept is similar to the use of try…finally block. Here, is an example.

with open('example.txt', 'w') as my_file:
    my_file.write('Hello world!')
This example writes the text Hello world! to the file example.txt. File objects have __enter__ and __exit__ method defined within them, so they act as their own context manager.

First the __enter__ method is called, then the code within with statement is executed and finally the __exit__ method is called. __exit__ method is called even if there is an error. It basically closes the file stream.


17. yield is used inside a function like a return statement. But yield returns a generator.

	Generator is an iterator that generates one item at a time. A large list of values will take up a lot of memory. Generators are useful in this situation as it generates only one value at a time instead of storing all the values in memory. For example,

 g = (2**x for x in range(100))#generator expression



will create a generator g which generates powers of 2 up to the number two raised to the power 99. We can generate the numbers using the next() function as shown below.

>>> next(g)
1
>>> next(g)
2
>>> next(g)
4
>>> next(g)
8
>>> next(g)
16


def generator():
    for i in range(6):
        yield i*i

g = generator()
for i in g:
    print(i)




Diff b/w Python2 and Python3:
1.
3.input("something:")#always read as string need to convert into specific type
4.Python 3 evaluates 3 / 2 as 1.5 by default
5.Python 3 stores strings as Unicode, by default. We have Unicode (utf-8) strings, and 2 byte classes: byte and byte arrays.
6.range(): generate a object that will return a number only when ask
7.Python 3 raises a SyntaxError if we do not enclose the exception argument in parenthesis.raise IOError("file error") #this is the recommended syntax in Python 3
8.In Python 3, arguments to exception should be declared with 'as' keyword.except Myerror as err: #In Python 3
9.
gen = (letter for letter in 'Hello World') # creates generator object
next(my_generator) #allowed in Python 2 and Python 3
my_generator.next() #allowed in Python 2. raises AttributeError in Python 3

10. Assertion can be used to Test_the_code, raise assertion_exception if condition is not true(ex : to check the argument passed to function)
	could be handled in same way as other exception , if not handled will terminate the program and produce a tracebreak
	assert expression, arg_to_exception
11. type(a)->used to check the type of variable a, isinstance(a,b)->True id variable is instance of class b , id(a)-> give memory address of object a 
12. Namespace:	BuiltIn Namespace contain-> Module specific Global Namespace contain-> Function local Name Space


Filter function: Call function for every element present in the seqence and return values from sequence condition evaluate to True(function should return True or False)
# Program to filter out only the even items from a list
my_list = [1, 5, 4, 6, 8, 11, 3, 12]
new_list = list(filter(lambda x: (x%2 == 0) , my_list))
print(new_list)

Map Function: Call function for every element present in the seqence
# Program to double each item in a list using map()
my_list = [1, 5, 4, 6, 8, 11, 3, 12]
new_list = list(map(lambda x: x * 2 , my_list))
print(new_list)


zip()#combine the every nth position value of passed object and result into list of tuple
	#if there is umcommon number of items in those passed object , it will zip till every passed object have items ,rest it will leave

list(enumrate(iterable object))#it will give list of tuple with element mappped to index location.

Module name:
math		: To carry out different mathematics like trigonometry, logarithms, probability and statistics, etc.
decimal		: Bydefault in python 1.1+2.2==3.3 will evalutae to False b/e of limitation of our computer hardware. so we can use decimal module instead when we are dealing with financial type of application
fractions	: Deal with fractional representtion of number
random
sphinx		: Library used to generate the documentation of a code.

Library:
nbconverter	:Library use to convert the ipynb(Jupyter notebook) into python file.
Timeit library is used to measure the execution time of a python code snippet
 	import timeit
	%timeit test_range(n)?-after importing the timeit module call in same syntex it will give the time taken by module  


pip install -r requirements.txt# we can use this command to install a number of libraries mentioned in the text file.
	requirement file contaion:
  
	scipy==0.19.1
	xxhash==1.0.1

20.Basic Practice:
	http://codingbat.com/python

More Mathematical (and Harder) Practice:
	https://projecteuler.net/archives

List of Practice Problems:
	http://www.codeabbey.com/index/task_list

A SubReddit Devoted to Daily Practice Problems:
	https://www.reddit.com/r/dailyprogrammer                        

A very tricky website with very few hints and touch problems (Not for beginners but still interesting)
	http://www.pythonchallenge.com/

Note:
1. In multi-line string, line breaks are inserted at the same position as in the code.
2. print(*objects, sep=' ', end='\n', file=sys.stdout, flush=False)
	By-Default end='\n' flush ot every element but if the end perameter s something else then '\n' then either we have to manually write code to flush out the output from buffer(sys.stdout.flush()) or flush=True else it will get print only when buffer gets full.
3. pypi is repo for open-source third-party python package and PIP is used to download the package from pypi 
4. Unit testing -we can use different testing tool pylint,unittest

Question:
1. Can we use slicing with dictonary.
2. PEP stands for Python Enhancement Proposal. It is a set of rules that specify how to format Python code for maximum readability.

