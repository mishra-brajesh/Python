Topics:
1.BuiltIn Data type :
	Immutable: 	Number(Int-(binary,decimal, octal, Hexadecimal)- any length, Float(e, E), complex), 
			String('', "", """"""(multiline string), ''''''(multiline string))	#a=""# Blank string , 
			Raw_String(quotes prefix with r), 
			Tuple  - a=()#blank tuple, tup1 = (50,)#tuple with one element 

	Mutable:   	List,
			Dictonary(Keys are Immutable but values are mutable)#a={}#blank dictonary, 
			Set(unordered collection of unique element) #a=set() #blank set,
			Frozen_set(ordered collection of unique elements), 
			boolean(True(1)-Non-zero or Non-null , False(0)-zero or null), None(object of NoneType- we can't create object of NoneType)

2. Keywords import keyword ;print(keyword.kwlist)  #list of keywrods present in python

2.Function : 	def , parameter(required, keyword, default, vararg(can be of two type tuple of object or mapping of object-dictonary)), doc String, return keyword
		Function can be created within function(Nested function)

3.Anonymous function:	x=Lamba c:print(c) 
			x(2)#calling a lambda function
			#Take variable number of argument and return a single value as expression 
			#have access to variable with in passed perameter or global namespace
			

4.Operator:	Airthmetic(+,-,*,/,//,**), comparison(==,!=,<>,>,>=,<,<=), Assignment(=,+=,-=,*=,/=,//=,**=),Logical(and , or , not), Bitwise(&-and, |-or, ^-XOR, ~-one's complement ,<<-left shift ,>>-right shift), Membership(in , not in),  indentity(is , is not) 

5.Flow control:	If, if else, if elif, if elif else, for , for else, while, while else, break, continue, pass


6.Module and package: 	Module is .py file 
			Package have __init__.py file 
			Sub Package have __init__.py file

Asertion

7. OOP: Class
	Inheritance 
	Overloading

8.  Iterator: 	Iterator in Python is simply an object that can be iterated upon. An object which will return data, one element at a time.
		Implemented in-for loop, comprehension, genrator
		Python iterator object must implement two special methods, __iter__() and __next__(), collectively called the iterator protocol.
		An object is called iterable if we can get an iterator from it.
Ex: 
list = [1,2,3,4]
it = iter(list) # this builds an iterator object
print (next(it)) #prints next available element in iterator
		

9. Genrator:	Python generators are a simple way of creating iterators
		A generator is a function that returns an object (iterator) which we can iterate over (one value at a time)
		If a function contains at least one yield statement (it may contain other yield or return statements), it becomes a generator function

10.Genrator Expression: generator expressions create anonymous generator functions.
			similar to list comprehension , just we use parenthesis in place of square bracket

10. Clousre: Technique by which some data ("Hello") gets attached to the code is called closure in Python.

11. Decorator:

12. Property

13. Exception Handling: try-except, try-multiple_except, try-except-else, try-finally

14. Raise an exception, User define exception

14. sorted function

Diff b/w Python2 and Python3:
1.print ("Hello World") # in Python 3, print must be followed by ()
2.print(x, end=" ")  # Appends a space instead of a newline in Python 3
3.input("something:")#always read as string need to convert into specific type
4.Python 3 evaluates 3 / 2 as 1.5 by default
5.Python 3 stores strings as Unicode, by default. We have Unicode (utf-8) strings, and 2 byte classes: byte and byte arrays.
6.range(): generate a object that will return a number only when ask
7.Python 3 raises a SyntaxError if we do not enclose the exception argument in parenthesis.raise IOError("file error") #this is the recommended syntax in Python 3
8.In Python 3, arguments to exception should be declared with 'as' keyword.except Myerror as err: #In Python 3
9.
gen = (letter for letter in 'Hello World') # creates generator object
next(my_generator) #allowed in Python 2 and Python 3
my_generator.next() #allowed in Python 2. raises AttributeError in Python 3

10. Assertion can be used to Test_the_code, raise assertion_exception if condition is not true(ex : to check the argument passed to function)
	could be handled in same way as other exception , if not handled will terminate the program and produce a tracebreak
	assert expression, arg_to_exception